diff a/Common/Pages/DiagramMainContent.razor b/Common/Pages/DiagramMainContent.razor	(rejected hunks)
@@ -399,278 +388,302 @@
                   Offset = new DiagramPoint() { X = 1, Y = 0.5 },
             },
         };
-        {
-            List<string> annotationDetails = new List<string> { };
-            string width = "width: 100%;";
-            if (node.AdditionalInfo != null && node.AdditionalInfo.Count > 0 && orgChartPropertyContainer.IsCopy)
+
             {
-                var info = node.AdditionalInfo;
-                foreach (KeyValuePair<string, object> keyValuePair in node.AdditionalInfo)
+                List<string> annotationDetails = new List<string> { };
+                string width = "width: 100%;";
+                if (node.AdditionalInfo != null && node.AdditionalInfo.Count > 0 && orgChartPropertyContainer!.IsCopy)
                 {
-                    var nodeID = keyValuePair.Key;
-                    if (!orgChartPropertyContainer.OriginalTextBoxValuesDictionary.ContainsKey(node.ID) && !orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.ContainsKey(node.ID) && !orgChartPropertyContainer.TextBoxDictionary.ContainsKey(node.ID) && !orgChartPropertyContainer.CheckBoxDictionary.ContainsKey(node.ID))
+                    var info = node.AdditionalInfo;
+                    foreach (KeyValuePair<string, object> keyValuePair in node.AdditionalInfo)
                     {
-                        var textBox = orgChartPropertyContainer.TextBoxDictionary[nodeID];
-                        var originalTextBox = orgChartPropertyContainer.OriginalTextBoxValuesDictionary[nodeID];
-                        List<string> deleteInformations = new List<string>();
-                        foreach (KeyValuePair<string, string> propertyNames in textBox)
+                        var nodeID = keyValuePair.Key;
+                        if (!orgChartPropertyContainer.OriginalTextBoxValuesDictionary.ContainsKey(node.ID) && !orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.ContainsKey(node.ID) && !orgChartPropertyContainer.TextBoxDictionary.ContainsKey(node.ID) && !orgChartPropertyContainer.CheckBoxDictionary.ContainsKey(node.ID))
                         {
-                            deleteInformations.Add(propertyNames.Key);
+                            var textBox = orgChartPropertyContainer.TextBoxDictionary[nodeID];
+                            var originalTextBox = orgChartPropertyContainer.OriginalTextBoxValuesDictionary[nodeID];
+                            List<string> deleteInformations = new List<string>();
+                            foreach (KeyValuePair<string, string> propertyNames in textBox)
+                            {
+                                deleteInformations.Add(propertyNames.Key);
+                            }
+                            orgChartPropertyContainer.DeleteDictionary.Add(node.ID, deleteInformations);
+                            var checkBox = orgChartPropertyContainer.CheckBoxDictionary[nodeID];
+                            var originalCheckBox = orgChartPropertyContainer.OriginalCheckBoxValuesDictionary[nodeID];
+                            orgChartPropertyContainer.OriginalTextBoxValuesDictionary[node.ID] = (originalTextBox);
+                            orgChartPropertyContainer.OriginalCheckBoxValuesDictionary[node.ID] = originalCheckBox;
+                            orgChartPropertyContainer.TextBoxDictionary[node.ID] = textBox;
+                            orgChartPropertyContainer.CheckBoxDictionary[node.ID] = checkBox;
+                        }
+                        IDiagramObject diagramObject = this.Diagram!.GetObject(nodeID) as IDiagramObject;
+                        Node newNode = diagramObject as Node;
+                        if (newNode != null && newNode.AdditionalInfo.Count > 0)
+                        {
+                            newNode.AdditionalInfo.Clear();
                         }
-                        orgChartPropertyContainer.DeleteDictionary.Add(node.ID, deleteInformations);
-                        var checkBox = orgChartPropertyContainer.CheckBoxDictionary[nodeID];
-                        var originalCheckBox = orgChartPropertyContainer.OriginalCheckBoxValuesDictionary[nodeID];
-                        orgChartPropertyContainer.OriginalTextBoxValuesDictionary[node.ID] = (originalTextBox);
-                        orgChartPropertyContainer.OriginalCheckBoxValuesDictionary[node.ID] = originalCheckBox;
-                        orgChartPropertyContainer.TextBoxDictionary[node.ID] = textBox;
-                        orgChartPropertyContainer.CheckBoxDictionary[node.ID] = checkBox;
-                    }
-                    Node newNode = this.Diagram.GetObject(nodeID) as Node;
-                    if (newNode!=null&&newNode.AdditionalInfo.Count > 0)
-                    {
-                        newNode.AdditionalInfo.Clear();
                     }
-                }
 
 
-            }
-            else
-            {
-                if ((node.AdditionalInfo != null && node.AdditionalInfo.Count > 0 && !orgChartPropertyContainer.IsCopy))
+                }
+                else
                 {
-                    string tooltip = "";
-                    orgChartPropertyContainer.TextBoxDictionary.Remove(node.ID);
-                    orgChartPropertyContainer.CheckBoxDictionary.Remove(node.ID);
-                    orgChartPropertyContainer.OriginalTextBoxValuesDictionary.Remove(node.ID);
-                    orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.Remove(node.ID);
-                    orgChartPropertyContainer.ApplyDictionary.Remove(node.ID);
-                    Dictionary<string, Dictionary<bool, bool>> dictionary = new Dictionary<string, Dictionary<bool, bool>>();
-                    Dictionary<string, bool> checkBoxValues = new Dictionary<string, bool>();
-                    Dictionary<string, string> textboxValues = new Dictionary<string, string>();
-                    Dictionary<string, bool> originalCheckBoxValues = new Dictionary<string, bool>();
-                    Dictionary<string, string> originalTextboxValues = new Dictionary<string, string>();
-                    bool applyDictionaryValue = false;
-                    List<string> deleteInformation = new List<string>();
-                    foreach (KeyValuePair<string, object> keyValuePair in node.AdditionalInfo)
+                    if ((node.AdditionalInfo != null && node.AdditionalInfo.Count > 0 && orgChartPropertyContainer != null && !orgChartPropertyContainer.IsCopy))
                     {
-                        if (keyValuePair.Value != null)
+                        string tooltip = "";
+                        orgChartPropertyContainer.TextBoxDictionary.Remove(node.ID);
+                        orgChartPropertyContainer.CheckBoxDictionary.Remove(node.ID);
+                        orgChartPropertyContainer.OriginalTextBoxValuesDictionary.Remove(node.ID);
+                        orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.Remove(node.ID);
+                        orgChartPropertyContainer.ApplyDictionary.Remove(node.ID);
+                        Dictionary<string, Dictionary<bool, bool>> dictionary = new Dictionary<string, Dictionary<bool, bool>>();
+                        Dictionary<string, bool> checkBoxValues = new Dictionary<string, bool>();
+                        Dictionary<string, string> textboxValues = new Dictionary<string, string>();
+                        Dictionary<string, bool> originalCheckBoxValues = new Dictionary<string, bool>();
+                        Dictionary<string, string> originalTextboxValues = new Dictionary<string, string>();
+                        bool applyDictionaryValue = false;
+                        List<string> deleteInformation = new List<string>();
+                        foreach (KeyValuePair<string, object> keyValuePair in node.AdditionalInfo)
                         {
-                            string additionalInfo = keyValuePair.Value.ToString();
-                            dictionary = JsonSerializer.Deserialize<Dictionary<string, Dictionary<bool, bool>>>(additionalInfo);
-                            var key = dictionary.Keys.FirstOrDefault();
-                            var values = dictionary.Values.FirstOrDefault();
-
-                            foreach (KeyValuePair<bool, bool> textcheckbox in values)
+                            if (keyValuePair.Value != null)
                             {
-                                if (textcheckbox.Value)
+                                string additionalInfo = keyValuePair!.Value!.ToString();
+                                if (!string.IsNullOrEmpty(additionalInfo))
                                 {
-                                    applyDictionaryValue = textcheckbox.Value;
+                                    dictionary = JsonSerializer.Deserialize<Dictionary<string, Dictionary<bool, bool>>>(additionalInfo);
+                                    var key = dictionary!.Keys.FirstOrDefault();
+                                    var values = dictionary!.Values.FirstOrDefault();
+
+
+
+                                    foreach (KeyValuePair<bool, bool> textcheckbox in values)
+                                    {
+                                        if (textcheckbox.Value)
+                                        {
+                                            applyDictionaryValue = textcheckbox.Value;
+                                        }
+                                        textboxValues.Add(keyValuePair.Key, key);
+                                        originalTextboxValues.Add(keyValuePair.Key, key);
+                                        originalCheckBoxValues.Add(keyValuePair.Key, textcheckbox.Key);
+                                        checkBoxValues.Add(keyValuePair.Key, textcheckbox.Key);
+                                        var isChecked = textcheckbox.Key;
+                                        if (node.Data == null && isChecked)
+                                        {
+                                            tooltip += "<tr><td>" + keyValuePair.Key + "</td><td>:</td><td>" + key + "</td></tr><tr>";
+                                        }
+                                        deleteInformation.Add(keyValuePair.Key);
+                                    }
                                 }
-                                textboxValues.Add(keyValuePair.Key, key);
-                                originalTextboxValues.Add(keyValuePair.Key, key);
-                                originalCheckBoxValues.Add(keyValuePair.Key, textcheckbox.Key);
-                                checkBoxValues.Add(keyValuePair.Key, textcheckbox.Key);
-                                var isChecked = textcheckbox.Key;
-                                if (node.Data == null && isChecked)
-                                {
-                                    tooltip += "<tr><td>" + keyValuePair.Key + "</td><td>:</td><td>" + key + "</td></tr><tr>";
-                                }
-                                deleteInformation.Add(keyValuePair.Key);
                             }
+
+                        }
+                        if (!orgChartPropertyContainer.DeleteDictionary.ContainsKey(node.ID))
+                        {
+                            orgChartPropertyContainer.DeleteDictionary.Add(node.ID, deleteInformation);
                         }
+                        node.AdditionalInfo.Clear();
+                        if (orgChartPropertyContainer.TextBoxDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.CheckBoxDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.OriginalTextBoxValuesDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.ContainsKey(node.ID))
+                        {
+                            orgChartPropertyContainer.TextBoxDictionary[node.ID] = textboxValues;
+                            orgChartPropertyContainer.CheckBoxDictionary[node.ID] = checkBoxValues;
+                            orgChartPropertyContainer.OriginalTextBoxValuesDictionary[node.ID] = originalTextboxValues;
+                            orgChartPropertyContainer.OriginalCheckBoxValuesDictionary[node.ID] = originalCheckBoxValues;
+                            orgChartPropertyContainer.ApplyDictionary[node.ID] = applyDictionaryValue;
+                        }
+                        else
+                        {
+                            orgChartPropertyContainer.TextBoxDictionary.Add(node.ID, textboxValues);
+                            orgChartPropertyContainer.CheckBoxDictionary.Add(node.ID, checkBoxValues);
+                            orgChartPropertyContainer.OriginalTextBoxValuesDictionary.Add(node.ID, originalTextboxValues);
+                            orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.Add(node.ID, originalCheckBoxValues);
+                            orgChartPropertyContainer.ApplyDictionary.Add(node.ID, applyDictionaryValue);
+                            orgChartPropertyContainer.IsAdditionalInfo = true;
 
+                        }
+                        if (node.Data != null)
+                        {
+                            OrgChartDetails orgChartDetails = JsonSerializer.Deserialize<OrgChartDetails>(node.Data.ToString());
+                            node.Data = orgChartDetails;
+                            var data = node.Data as OrgChartDetails;
+                            string image = (node.Shape is ImageShape) ? (node.Shape as ImageShape).Source : "";
+                            node.Tooltip = new DiagramTooltip() { Template = "<table" + " style=" + width + "><tr><td>Name</td><td>:</td><td>" + data.Name + "</td></tr><tr><td>Role</td><td>:</td><td>" + data.Role + "</td></tr><tr><td>Email</td><td>:</td><td>" + data.Email + "</td></tr><tr><td>Department</td><td>:</td><td>" + data.Department + "</td></tr><tr><td>EmployeeID</td><td>:</td><td>" + data.EmployeeID + "</td></tr><tr><td>SupervisorID</td><td>:</td><td>" + data.SupervisorID + "</td></tr><tr><td>SupervisorName</td><td>:</td><td>" + data.SupervisorName + "</td></tr><tr><td>Location</td><td>:</td><td>" + data.Location + "</td></tr><tr><td>Phone</td><td>:</td><td>" + data.Phone + "</td></tr><tr><td>ImageURL</td><td>:</td><td>" + image + "</td></tr></table>", Position = Syncfusion.Blazor.Popups.Position.BottomCenter };
+                        }
+                        else
+                        {
+                            node.Tooltip = new DiagramTooltip() { Template = "<table" + " style=" + width + ">" + tooltip + "</table>", Position = Syncfusion.Blazor.Popups.Position.BottomCenter };
+                        }
                     }
-                    if (!orgChartPropertyContainer.DeleteDictionary.ContainsKey(node.ID))
-                    {
-                        orgChartPropertyContainer.DeleteDictionary.Add(node.ID, deleteInformation);
-                    }
-                    node.AdditionalInfo.Clear();
-                    if (orgChartPropertyContainer.TextBoxDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.CheckBoxDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.OriginalTextBoxValuesDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.ContainsKey(node.ID))
-                    {
-                        orgChartPropertyContainer.TextBoxDictionary[node.ID] = textboxValues;
-                        orgChartPropertyContainer.CheckBoxDictionary[node.ID] = checkBoxValues;
-                        orgChartPropertyContainer.OriginalTextBoxValuesDictionary[node.ID] = originalTextboxValues;
-                        orgChartPropertyContainer.OriginalCheckBoxValuesDictionary[node.ID] = originalCheckBoxValues;
-                        orgChartPropertyContainer.ApplyDictionary[node.ID] = applyDictionaryValue;
-                    }
-                    else
-                    {
-                        orgChartPropertyContainer.TextBoxDictionary.Add(node.ID, textboxValues);
-                        orgChartPropertyContainer.CheckBoxDictionary.Add(node.ID, checkBoxValues);
-                        orgChartPropertyContainer.OriginalTextBoxValuesDictionary.Add(node.ID, originalTextboxValues);
-                        orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.Add(node.ID, originalCheckBoxValues);
-                        orgChartPropertyContainer.ApplyDictionary.Add(node.ID, applyDictionaryValue);
-                        orgChartPropertyContainer.IsAdditionalInfo = true;
 
-                    }
-                    if (node.Data != null)
-                    {
-                        OrgChartDetails orgChartDetails =JsonSerializer.Deserialize<OrgChartDetails>(node.Data.ToString());
-                        node.Data = orgChartDetails;
-                        var data = node.Data as OrgChartDetails;
-                        string image=(node.Shape is ImageShape)?(node.Shape as ImageShape).Source:"";
-                        node.Tooltip = new DiagramTooltip() { Template = "<table" + " style=" + width + "><tr><td>Name</td><td>:</td><td>" + data.Name + "</td></tr><tr><td>Role</td><td>:</td><td>" + data.Role + "</td></tr><tr><td>Email</td><td>:</td><td>" + data.Email + "</td></tr><tr><td>Department</td><td>:</td><td>" + data.Department + "</td></tr><tr><td>EmployeeID</td><td>:</td><td>" + data.EmployeeID + "</td></tr><tr><td>SupervisorID</td><td>:</td><td>" + data.SupervisorID + "</td></tr><tr><td>SupervisorName</td><td>:</td><td>" + data.SupervisorName + "</td></tr><tr><td>Location</td><td>:</td><td>" + data.Location + "</td></tr><tr><td>Phone</td><td>:</td><td>" + data.Phone + "</td></tr><tr><td>ImageURL</td><td>:</td><td>" + image + "</td></tr></table>", Position = Syncfusion.Blazor.Popups.Position.BottomCenter };
-                    }
-                    else
-                    {
-                        node.Tooltip = new DiagramTooltip() { Template = "<table" + " style=" + width + ">" + tooltip + "</table>", Position = Syncfusion.Blazor.Popups.Position.BottomCenter };
-                    }
                 }
 
-            }
-
-            if (node.Data == null && node.AdditionalInfo != null && node.AdditionalInfo.Count == 0)
-            {
-
-                if (!orgChartPropertyContainer.TextBoxDictionary.ContainsKey(node.ID) && !orgChartPropertyContainer.CheckBoxDictionary.ContainsKey(node.ID))
+                if (node.Data == null && node.AdditionalInfo != null && node.AdditionalInfo.Count == 0)
                 {
-                    string tooltipValue = "";
-                    orgChartPropertyContainer.ApplyDictionary.Add(node.ID, false);
-                    Dictionary<string, string> textBoxValues = new Dictionary<string, string>();
-                    Dictionary<string, bool> checkBoxValues = new Dictionary<string, bool>();
-                    Dictionary<string, string> originalDictionaryTextBoxValues = new Dictionary<string, string>();
-                    Dictionary<string, bool> originalDictionaryCheckBoxValues = new Dictionary<string, bool>();
-                    List<string> deleteInformation = new List<string>();
-                    EditUserHandlePropertyPanel editUserHandlePropertyPanelDetails = new EditUserHandlePropertyPanel();
-                    editUserHandlePropertyPanelDetails.PropertyName = "Name";
-                    editUserHandlePropertyPanelDetails.PropertyValue = "Name";
-                    editUserHandlePropertyPanelDetails.IsChecked = true;
-
-                    tooltipValue += "<tr><td>" + editUserHandlePropertyPanelDetails.PropertyName + "</td><td>:</td><td>" + editUserHandlePropertyPanelDetails.PropertyValue + "</td></tr><tr>";
-                    deleteInformation.Add(editUserHandlePropertyPanelDetails.PropertyName);
-                    textBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
-                    checkBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
-                    originalDictionaryTextBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
-                    originalDictionaryCheckBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
-                    if ((orgChartPropertyContainer.Templatevalue == "None" && orgChartPropertyContainer.OrgChartStyle == "Style2") || (orgChartPropertyContainer.Templatevalue == "None" && orgChartPropertyContainer.OrgChartStyle == "Style3"))
+
+                    if (!orgChartPropertyContainer.TextBoxDictionary.ContainsKey(node.ID) && !orgChartPropertyContainer.CheckBoxDictionary.ContainsKey(node.ID))
                     {
-                        editUserHandlePropertyPanelDetails.PropertyName = "Role";
-                        editUserHandlePropertyPanelDetails.PropertyValue = "Role";
-                        editUserHandlePropertyPanelDetails.IsChecked = true;
+                        string tooltipValue = "";
+                        orgChartPropertyContainer.ApplyDictionary.Add(node.ID, false);
+                        Dictionary<string, string> textBoxValues = new Dictionary<string, string>();
+                        Dictionary<string, bool> checkBoxValues = new Dictionary<string, bool>();
+                        Dictionary<string, string> originalDictionaryTextBoxValues = new Dictionary<string, string>();
+                        Dictionary<string, bool> originalDictionaryCheckBoxValues = new Dictionary<string, bool>();
+                        List<string> deleteInformation = new List<string>();
+                        EditUserHandlePropertyPanel editUserHandlePropertyPanelDetails = new EditUserHandlePropertyPanel
+                            {
+                                PropertyName = "Name",
+                                PropertyValue = "Name",
+                                IsChecked = true
+                            };
+
                         tooltipValue += "<tr><td>" + editUserHandlePropertyPanelDetails.PropertyName + "</td><td>:</td><td>" + editUserHandlePropertyPanelDetails.PropertyValue + "</td></tr><tr>";
                         deleteInformation.Add(editUserHandlePropertyPanelDetails.PropertyName);
                         textBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
                         checkBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
                         originalDictionaryTextBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
                         originalDictionaryCheckBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
-                    }
+                        if ((orgChartPropertyContainer.Templatevalue == "None" && orgChartPropertyContainer.OrgChartStyle == "Style2") || (orgChartPropertyContainer.Templatevalue == "None" && orgChartPropertyContainer.OrgChartStyle == "Style3"))
+                        {
+                            editUserHandlePropertyPanelDetails.PropertyName = "Role";
+                            editUserHandlePropertyPanelDetails.PropertyValue = "Role";
+                            editUserHandlePropertyPanelDetails.IsChecked = true;
+                            tooltipValue += "<tr><td>" + editUserHandlePropertyPanelDetails.PropertyName + "</td><td>:</td><td>" + editUserHandlePropertyPanelDetails.PropertyValue + "</td></tr><tr>";
+                            deleteInformation.Add(editUserHandlePropertyPanelDetails.PropertyName);
+                            textBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
+                            checkBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
+                            originalDictionaryTextBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
+                            originalDictionaryCheckBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
+                        }
 
 
-                    editUserHandlePropertyPanelDetails.PropertyName = "Version";
-                    editUserHandlePropertyPanelDetails.PropertyValue = "";
-                    editUserHandlePropertyPanelDetails.IsChecked = false;
-                    deleteInformation.Add(editUserHandlePropertyPanelDetails.PropertyName);
-                    textBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
-                    checkBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
-                    originalDictionaryTextBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
-                    originalDictionaryCheckBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
-                    if (node.Shape is ImageShape)
-                    {
-                        editUserHandlePropertyPanelDetails.PropertyName = "ImageURL";
-                        editUserHandlePropertyPanelDetails.PropertyValue = (node.Shape as ImageShape).Source;
-                        editUserHandlePropertyPanelDetails.IsChecked = true;
-                        tooltipValue += "<tr><td>" + editUserHandlePropertyPanelDetails.PropertyName + "</td><td>:</td><td>" + editUserHandlePropertyPanelDetails.PropertyValue + "</td></tr><tr>";
+                        editUserHandlePropertyPanelDetails.PropertyName = "Version";
+                        editUserHandlePropertyPanelDetails.PropertyValue = "";
+                        editUserHandlePropertyPanelDetails.IsChecked = false;
+                        deleteInformation.Add(editUserHandlePropertyPanelDetails.PropertyName);
                         textBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
                         checkBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
                         originalDictionaryTextBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
                         originalDictionaryCheckBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
-                    }
-                    orgChartPropertyContainer.TextBoxDictionary.Add(node.ID, textBoxValues);
-                    orgChartPropertyContainer.CheckBoxDictionary.Add(node.ID, checkBoxValues);
-                    orgChartPropertyContainer.OriginalTextBoxValuesDictionary.Add(node.ID, originalDictionaryTextBoxValues);
-                    orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.Add(node.ID, originalDictionaryCheckBoxValues);
-                    orgChartPropertyContainer.DeleteDictionary.Add(node.ID, deleteInformation);
-                    node.Tooltip = new DiagramTooltip() { Template = "<table" + " style=" + width + ">" + tooltipValue + "</table>", Position = Syncfusion.Blazor.Popups.Position.BottomCenter };
-
+                        if (node.Shape is ImageShape)
+                        {
+                            editUserHandlePropertyPanelDetails.PropertyName = "ImageURL";
+                            if (node.Shape is ImageShape imageShape && imageShape.Source != null)
+                            {
+                                editUserHandlePropertyPanelDetails.PropertyValue = imageShape.Source;
+                            }
+                            else
+                            {
+                                editUserHandlePropertyPanelDetails.PropertyValue = "";
+                            }
+                            editUserHandlePropertyPanelDetails.IsChecked = true;
+                            tooltipValue += "<tr><td>" + editUserHandlePropertyPanelDetails.PropertyName + "</td><td>:</td><td>" + editUserHandlePropertyPanelDetails.PropertyValue + "</td></tr><tr>";
+                            textBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
+                            checkBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
+                            originalDictionaryTextBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.PropertyValue);
+                            originalDictionaryCheckBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
+                        }
+                        orgChartPropertyContainer.TextBoxDictionary.Add(node.ID, textBoxValues);
+                        orgChartPropertyContainer.CheckBoxDictionary.Add(node.ID, checkBoxValues);
+                        orgChartPropertyContainer.OriginalTextBoxValuesDictionary.Add(node.ID, originalDictionaryTextBoxValues);
+                        orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.Add(node.ID, originalDictionaryCheckBoxValues);
+                        orgChartPropertyContainer.DeleteDictionary.Add(node.ID, deleteInformation);
+                        node.Tooltip = new DiagramTooltip() { Template = "<table" + " style=" + width + ">" + tooltipValue + "</table>", Position = Syncfusion.Blazor.Popups.Position.BottomCenter };
 
-                }
 
-            }
-            if ( orgChartPropertyContainer.IsLayout && node.Data != null && node.AdditionalInfo != null && node.AdditionalInfo.Count == 0)
-            {
-                annotationDetails = new List<string>();
-                var data = node.Data as OrgChartDetails;
+                    }
 
-                if (data != null && orgChartPropertyContainer.Templatevalue != "template1" && orgChartPropertyContainer.Templatevalue != "template2" && orgChartPropertyContainer.IsUploader || ((data != null && orgChartPropertyContainer.IsUploader && orgChartPropertyContainer.IsUploderFirstTime)))
-                {
-                    node.Shape = new ImageShape { Type = NodeShapes.Image, Source = data.ImageURL, ImageAlign = ImageAlignment.XMinYMin, Scale = DiagramScale.None };
                 }
-                bool isApply = false;
-                if (orgChartPropertyContainer.ApplyDictionary.ContainsKey(node.ID))
+                if (orgChartPropertyContainer!.IsLayout && node.Data != null && node.AdditionalInfo != null && node.AdditionalInfo.Count == 0)
                 {
-                    isApply = orgChartPropertyContainer.ApplyDictionary[node.ID];
-                }
-                if (Parent.MenuBar.IsOpenClick||(!isApply &&node.Data!=null))
-                {
-                    foreach (KeyValuePair<string, bool> keyValues in orgChartPropertyContainer.DataSourceDictionary)
+                    annotationDetails = new List<string>();
+                    var data = node.Data as OrgChartDetails;
+
+                    if (data != null && orgChartPropertyContainer.Templatevalue != "template1" && orgChartPropertyContainer.Templatevalue != "template2" && orgChartPropertyContainer.IsUploader || ((data != null && orgChartPropertyContainer.IsUploader && orgChartPropertyContainer.IsUploderFirstTime)))
                     {
-                        if (keyValues.Value && data != null)
+                        node.Shape = new ImageShape { Type = NodeShapes.Image, Source = data.ImageURL, ImageAlign = ImageAlignment.XMinYMin, Scale = DiagramScale.None };
+                    }
+                    bool isApply = false;
+                    if (orgChartPropertyContainer.ApplyDictionary.ContainsKey(node.ID))
+                    {
+                        isApply = orgChartPropertyContainer.ApplyDictionary[node.ID];
+                    }
+                    if (Parent!.MenuBar!.IsOpenClick || (!isApply && node.Data != null))
+                    {
+                        foreach (KeyValuePair<string, bool> keyValues in orgChartPropertyContainer.DataSourceDictionary)
                         {
-                            UpdateAnnotation(node, keyValues.Key,annotationDetails);
-                        }
+                            if (keyValues.Value && data != null)
+                            {
+                                UpdateAnnotation(node, keyValues.Key, annotationDetails);
+                            }
 
+                        }
                     }
-                }
-                var annotations = new DiagramObjectCollection<ShapeAnnotation>();
-                for (var i = 0; i < annotationDetails.Count; i++)
-                {
-                    var content = annotationDetails[i];
-                    var annotation1 = new ShapeAnnotation() { Content = content != null ? content.ToString() : "" };
-                    annotation1.Style = new TextStyle() { FontSize = 10 };
-                    await annotations.AddAsync(annotation1);
-                }
-                if (annotations.Count > 0)
-                {
-                    node.Annotations = annotations;
-                }
-                orgChartPropertyContainer.UpdateAnnotationStyle(node);
-                if (data != null && !orgChartPropertyContainer.IsAddNode)
-                {
-                    string image=(node.Shape is ImageShape)?(node.Shape as ImageShape).Source:"";
-                    node.Tooltip = new DiagramTooltip() { Template = "<table" + " style=" + width + "><tr><td>Name</td><td>:</td><td>" + data.Name + "</td></tr><tr><td>Role</td><td>:</td><td>" + data.Role + "</td></tr><tr><td>Email</td><td>:</td><td>" + data.Email + "</td></tr><tr><td>Department</td><td>:</td><td>" + data.Department + "</td></tr><tr><td>EmployeeID</td><td>:</td><td>" + data.EmployeeID + "</td></tr><tr><td>SupervisorID</td><td>:</td><td>" + data.SupervisorID + "</td></tr><tr><td>SupervisorName</td><td>:</td><td>" + data.SupervisorName + "</td></tr><tr><td>Location</td><td>:</td><td>" + data.Location + "</td></tr><tr><td>Phone</td><td>:</td><td>" + data.Phone + "</td></tr><tr><td>ImageURL</td><td>:</td><td>" + image + "</td></tr></table>", Position = Syncfusion.Blazor.Popups.Position.BottomCenter };
-                }
-                Dictionary<string, object> properties = new Dictionary<string, object>();
-                Dictionary<string, string> textBoxValues = new Dictionary<string, string>();
-                Dictionary<string, bool> checkBoxValues = new Dictionary<string, bool>();
-                EditUserHandlePropertyPanel editUserHandlePropertyPanelDetails = new EditUserHandlePropertyPanel();
-                if (!isApply)
-                {
-                    foreach (KeyValuePair<string, bool> keyValue in orgChartPropertyContainer.DataSourceDictionary)
+                    var annotations = new DiagramObjectCollection<ShapeAnnotation>();
+                    for (var i = 0; i < annotationDetails.Count; i++)
                     {
-                        editUserHandlePropertyPanelDetails.PropertyName = keyValue.Key;
-                        editUserHandlePropertyPanelDetails.IsChecked = keyValue.Value;
-                        UpdateTextfield(node, keyValue.Key, textBoxValues);
-                        checkBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
+                        var content = annotationDetails[i];
+                        var annotation1 = new ShapeAnnotation() { Content = content != null ? content.ToString() : "" };
+                        annotation1.Style = new TextStyle() { FontSize = 10 };
+                        await annotations.AddAsync(annotation1);
                     }
-                    if (orgChartPropertyContainer.TextBoxDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.CheckBoxDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.ContainsKey(node.ID))
+                    if (annotations.Count > 0)
                     {
-                        if (!orgChartPropertyContainer.IsAddNode)
+                        node.Annotations = annotations;
+                    }
+                    orgChartPropertyContainer.UpdateAnnotationStyle(node);
+                    if (data != null && !orgChartPropertyContainer.IsAddNode)
+                    {
+                        string image = "";
+                        if (node.Shape is ImageShape imageShape && imageShape.Source != null)
                         {
-                            orgChartPropertyContainer.TextBoxDictionary[node.ID] = (textBoxValues);
-                            orgChartPropertyContainer.CheckBoxDictionary[node.ID] = (checkBoxValues);
-                            orgChartPropertyContainer.OriginalTextBoxValuesDictionary[node.ID] = (textBoxValues);
-                            orgChartPropertyContainer.OriginalCheckBoxValuesDictionary[node.ID] = (checkBoxValues);
+                            image = imageShape.Source;
                         }
+                        node.Tooltip = new DiagramTooltip() { Template = "<table" + " style=" + width + "><tr><td>Name</td><td>:</td><td>" + data.Name + "</td></tr><tr><td>Role</td><td>:</td><td>" + data.Role + "</td></tr><tr><td>Email</td><td>:</td><td>" + data.Email + "</td></tr><tr><td>Department</td><td>:</td><td>" + data.Department + "</td></tr><tr><td>EmployeeID</td><td>:</td><td>" + data.EmployeeID + "</td></tr><tr><td>SupervisorID</td><td>:</td><td>" + data.SupervisorID + "</td></tr><tr><td>SupervisorName</td><td>:</td><td>" + data.SupervisorName + "</td></tr><tr><td>Location</td><td>:</td><td>" + data.Location + "</td></tr><tr><td>Phone</td><td>:</td><td>" + data.Phone + "</td></tr><tr><td>ImageURL</td><td>:</td><td>" + image + "</td></tr></table>", Position = Syncfusion.Blazor.Popups.Position.BottomCenter };
                     }
-                    else
+                    Dictionary<string, object> properties = new Dictionary<string, object>();
+                    Dictionary<string, string> textBoxValues = new Dictionary<string, string>();
+                    Dictionary<string, bool> checkBoxValues = new Dictionary<string, bool>();
+                    EditUserHandlePropertyPanel editUserHandlePropertyPanelDetails = new EditUserHandlePropertyPanel();
+                    if (!isApply)
                     {
-                        orgChartPropertyContainer.TextBoxDictionary.Add(node.ID, textBoxValues);
-                        orgChartPropertyContainer.CheckBoxDictionary.Add(node.ID, checkBoxValues);
-                        orgChartPropertyContainer.OriginalTextBoxValuesDictionary.Add(node.ID, textBoxValues);
-                        orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.Add(node.ID, checkBoxValues);
-                        orgChartPropertyContainer.ApplyDictionary.Add(node.ID, true);
+                        foreach (KeyValuePair<string, bool> keyValue in orgChartPropertyContainer.DataSourceDictionary)
+                        {
+                            editUserHandlePropertyPanelDetails.PropertyName = keyValue.Key;
+                            editUserHandlePropertyPanelDetails.IsChecked = keyValue.Value;
+                            UpdateTextfield(node, keyValue.Key, textBoxValues);
+                            checkBoxValues.Add(editUserHandlePropertyPanelDetails.PropertyName, editUserHandlePropertyPanelDetails.IsChecked);
+                        }
+                        if (orgChartPropertyContainer.TextBoxDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.CheckBoxDictionary.ContainsKey(node.ID) && orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.ContainsKey(node.ID))
+                        {
+                            if (!orgChartPropertyContainer.IsAddNode)
+                            {
+                                orgChartPropertyContainer.TextBoxDictionary[node.ID] = (textBoxValues);
+                                orgChartPropertyContainer.CheckBoxDictionary[node.ID] = (checkBoxValues);
+                                orgChartPropertyContainer.OriginalTextBoxValuesDictionary[node.ID] = (textBoxValues);
+                                orgChartPropertyContainer.OriginalCheckBoxValuesDictionary[node.ID] = (checkBoxValues);
+                            }
+                        }
+                        else
+                        {
+                            orgChartPropertyContainer.TextBoxDictionary.Add(node.ID, textBoxValues);
+                            orgChartPropertyContainer.CheckBoxDictionary.Add(node.ID, checkBoxValues);
+                            orgChartPropertyContainer.OriginalTextBoxValuesDictionary.Add(node.ID, textBoxValues);
+                            orgChartPropertyContainer.OriginalCheckBoxValuesDictionary.Add(node.ID, checkBoxValues);
+                            orgChartPropertyContainer.ApplyDictionary.Add(node.ID, true);
+                        }
                     }
+                    orgChartPropertyContainer.UpdateAnnotationPosition(node);
+                    node.Style.Fill = "#88C65C";
+                    node.Style.StrokeColor = "#88C65C";
+                }
+                foreach (ShapeAnnotation annotation in node.Annotations)
+                {
+                    annotation.Constraints = AnnotationConstraints.ReadOnly;
+                }
+                node.Constraints = NodeConstraints.Default | NodeConstraints.Tooltip;
+                if (node.AdditionalInfo != null)
+                {
+                    node.AdditionalInfo.Clear();
                 }
-                orgChartPropertyContainer.UpdateAnnotationPosition(node);
-                node.Style.Fill = "#88C65C";
-                node.Style.StrokeColor = "#88C65C";
-            }
-            foreach (ShapeAnnotation annotation in node.Annotations)
-            {
-                annotation.Constraints = AnnotationConstraints.ReadOnly;
             }
-            node.Constraints = NodeConstraints.Default | NodeConstraints.Tooltip;
-            node.AdditionalInfo.Clear();
         }
     }
     /// <summary>
@@ -1036,7 +1050,7 @@
             }
             if (obj.Name == "delete")
             {
-                 bool GroupAction = false;
+                bool GroupAction = false;
                 Diagram.BeginUpdate();
                 if (Diagram.SelectionSettings.Nodes.Count > 1 || Diagram.SelectionSettings.Connectors.Count > 1 || ((Diagram.SelectionSettings.Nodes.Count + Diagram.SelectionSettings.Connectors.Count) > 1))
                 {
@@ -1052,8 +1066,8 @@
                     {
                         var item = Diagram.SelectionSettings.Nodes[i];
                         if (item.ID != "rootNode"){
-                        Diagram.Nodes.Remove(item);
-                    }
+                            Diagram.Nodes.Remove(item);
+                        }
                     }
                 }
                 if (Diagram.SelectionSettings.Connectors.Count != 0)
@@ -1236,7 +1253,7 @@
     /// <returns>A task representing the asynchronous operation.</returns>
     private async Task AddRemoveOrgChartNode(string type)
     {
-      OrgChartPropertyContainer  orgChartPropertyContainer = Parent.OrgChartPropertyPanel;
+        OrgChartPropertyContainer  orgChartPropertyContainer = Parent.OrgChartPropertyPanel;
         if(type=="AddNode")
         {
             await orgChartPropertyContainer.AddNode(Diagram.SelectionSettings.Nodes[0].ID);
@@ -1247,7 +1264,7 @@
         }
         else
         {
-             orgChartPropertyContainer.EditHandle();
+            orgChartPropertyContainer.EditHandle();
         }
     }
     /// <summary>
@@ -1269,6 +1286,10 @@
     /// <param name="args">The event arguments containing information about the created object.</param>
     private async void Created(object args)
     {
-            Diagram.Select(new ObservableCollection<IDiagramObject>() { Diagram.Nodes[0] });
+        this.Parent.Toolbar.OrgChartToolBarVisibility = "block";
+        Diagram.Select(new ObservableCollection<IDiagramObject>() { Diagram.Nodes[0] });
+        this.Parent.Toolbar.StateChanged();
+        this.Parent.DiagramContent.StateChanged();
+
     }
 }
\ No newline at end of file
